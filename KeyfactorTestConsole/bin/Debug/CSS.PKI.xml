<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSS.PKI</name>
    </assembly>
    <members>
        <member name="M:CSS.PKI.BouncyCastleX509Extensions.IsCaCertificate(Org.BouncyCastle.X509.X509Certificate)">
            <summary>
            Returns true if this certificate is a certificate authority certificate, returns false if it is not.
            </summary>
        </member>
        <member name="M:CSS.PKI.X509Extentions.IsCaCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>
            Returns true if this certificate is a certificate authority certificate, returns false if it is not.
            </summary>
        </member>
        <member name="M:CSS.PKI.X509.CertificateCollectionConverter.ToX509Certificate2Collection(System.String)">
            <summary>
            Creates an X509Certificate2Collection from a CertificateCollectionConverter. A password must be provided if the collection being converted has an associated private key.
            </summary>
            <param name="password">Optional password.</param>
            <returns>X509Certificate2Collection.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateCollectionConverter.ToPEM(System.String)">
            <summary>
            Creates a PEM string from a CertificateCollectionConverter. A password must be provided if the collection being converted has an associated private key.
            </summary>
            <param name="password">Optional password.</param>
            <returns>Certificate Collection PEM string</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateCollectionConverter.ToDER(System.String)">
            <summary>
            Creates a DER byte array from a CertificateCollectionConverter. A password must be provided if the collection being converted has an associated private key.
            </summary>
            <param name="password">Optional password.</param>
            <returns>Certificate collection byte array.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateCollectionConverter.ToX509Certificate2List(System.String)">
            <summary>
            Creates an X509Certificate2 List from a CertificateCollectionConverter. A password must be provided if the collection being converted has an associated private key.
            </summary>
            <param name="password">Optional password.</param>
            <returns>X509Certificate2 List.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateCollectionConverter.ToX509CertificateEntryList">
            <summary>
            Creates an X509CertificateEntry List from a CertificateCollectionConverter. A password must be provided if the collection being converted has an associated private key.
            </summary>
            <returns>X509CertificateEntry List.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateCollectionConverterFactory.FromDER(System.Byte[],System.String)">
            <summary>
            Creates CertificateCollectionConverter from a DER byte array. A password must be provided if the byte array contains a private key.
            </summary>
            <param name="derBytes">Certificate collection byte array.</param>
            <param name="password">Optional password.</param>
            <returns>CertificateCollectionConverter.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateCollectionConverterFactory.FromPEM(System.String,System.String)">
            <summary>
            Creates CertificateCollectionConverter from a PEM string. A password must be provided if the string contains a private key.
            </summary>
            <param name="pemString">PEM string that contains a certificate collection and optionally a private key.</param>
            <param name="password">Optional password.</param>
            <returns>CertificateCollectionConverter.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateCollectionConverterFactory.FromPEM(System.Byte[],System.String)">
            <summary>
            Creates CertificateCollectionConverter from a byte array of a PEM string. A password must be provided if the string contains a private key.
            </summary>
            <param name="pemBytes">Byte array of aPEM string that contains a certificate collection and optionally a private key.</param>
            <param name="password">Optional password.</param>
            <returns>CertificateCollectionConverter.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateCollectionConverterFactory.FromX509Certificate2Collection(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.String)">
            <summary>
            Creates CertificateCollectionConverter from an X509Certificate2Collection. A password must be provided if the collection has an associated private key.
            </summary>
            <param name="collection">X509Certificate2Collection, may have a private key associated with it.</param>
            <param name="password">Optional password.</param>
            <returns>CertificateCollectionConverter.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateCollectionConverterFactory.FromX509Chain(System.Security.Cryptography.X509Certificates.X509Chain,System.String)">
            <summary>
            Creates CertificateCollectionConverter from an X509Chain. A password must be provided if any of the certificates have an associated private key.
            </summary>
            <param name="chain">X509Chain, may have a private key associated with it.</param>
            <param name="password">Optional password.</param>
            <returns>CertificateCollectionConverter.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateCollectionConverterFactory.FromX509CertificateEntryList(System.Collections.Generic.List{Org.BouncyCastle.Pkcs.X509CertificateEntry})">
            <summary>
            Creates CertificateCollectionConverter from a Bouncy Castle X509CertificateEntry List.
            </summary>
            <param name="X509CertEntryList">List of X509CertificateEntry</param>
            <returns>CertificateCollectionConverter.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateCollectionConverterFactory.FromX509Certificate2List(System.Collections.Generic.List{System.Security.Cryptography.X509Certificates.X509Certificate2},System.String)">
            <summary>
            Creates CertificateCollectionConverter from an X509Certificate2 List. A password must be provided if any of the certificates have an associated private key.
            </summary>
            <param name="X509Cert2List">List of X509Certificate2, may have a private key associated with it.</param>
            <param name="password">Optional password.</param>
            <returns>CertificateCollectionConverter.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateConverter.ToBouncyCastleCertificate">
            <summary>
            Creates a Bouncy Castle X509Certificate from a CertificateConverter.
            </summary>
            <returns>Bouncy Castle X509Certificate.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateConverter.ToX509Certificate2(System.String)">
            <summary>
            Creates an X509Certificate2 from a CertificateConverter. A password must be provided if the certificate being converted has an associated private key.
            </summary>
            <param name="password">Optional password.</param>
            <returns>X509Certificate2.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateConverter.ToPEM(System.Boolean,System.String)">
            <summary>
            Creates a certificate PEM string from a CertificateConverter. A password must be provided if the certificate being converted has an associated private key.
            </summary>
            <param name="password">Optional password.</param>
            <returns>PEM string.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateConverter.ToDER(System.String)">
            <summary>
            Creates a DER byte arary from a CertificateConverter. A password must be provided if the certificate being converted has an associated private key.
            </summary>
            <param name="password">Optional password.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateConverterFactory.FromPEM(System.Byte[],System.String)">
            <summary>
            Creates a CertificateConverter from a byte array of a PEM string. A password must be provided if the certificate has an associated private key.
            </summary>
            <param name="pemBytes">byte array of a PEM string.</param>
            <param name="password">Optional password.</param>
            <returns>CertificateConverter.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateConverterFactory.FromPEM(System.String,System.String)">
            <summary>
            Creates a CertificateConverter from a PEM string. A password must be provided if the certificate has an associated private key.
            </summary>
            <param name="pemString">PEM string that contains a certificate and optionally a private key.</param>
            <param name="password">Optional password.</param>
            <returns>CertificateConverter.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateConverterFactory.FromDER(System.Byte[],System.String)">
            <summary>
            Creates a CertificateConverter from a DER byte array. A password must be provided if the certificate has an associated private key.
            </summary>
            <param name="derBytes">byte array that contains a certificate and optionally a private key.</param>
            <param name="password">Optional password.</param>
            <returns>CertificateConverter.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateConverterFactory.FromX509Certificate2(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Creates a CertificateConverter from an X509Certificate2. A password must be provided if the certificate has an associated private key.
            </summary>
            <param name="dotNetCert">X509Certificate2.</param>
            <param name="password">Optional password.</param>
            <returns>CertificateConverter.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateConverterFactory.FromBouncyCastleCertificate(Org.BouncyCastle.X509.X509Certificate)">
            <summary>
            Creates a CertificateConverter from a Bouncy Castle certificate.
            </summary>
            <param name="bcCert">Bouncy Castle certificate.</param>
            <returns>CertificateConverter.</returns>
        </member>
        <member name="M:CSS.PKI.X509.CertificateConverterFactory.ConvertWithPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String)">
            <summary>
            Creates a CertificateConverter with a private key.
            </summary>
            <param name="dotNetCert">X509Certificate2.</param>
            <param name="password">password.</param>
            <returns>CertificateConverter.</returns>
        </member>
        <member name="T:CSS.PKI.X509.LocalStoreReader">
            <summary>
            Collection of static methods to manage the machine certificate store.
            </summary>
        </member>
        <member name="M:CSS.PKI.X509.LocalStoreReader.GetCertificates(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)">
            <summary>
            Returns a certificate collection from the provided store.
            </summary>
            <param name="storeName">Name of the store within the location to be accessed.</param>
            <param name="storeLocation">Location of the store to be accessed.</param>
            <returns>X509Certificate2Collection</returns>
        </member>
        <member name="M:CSS.PKI.X509.LocalStoreReader.GetUserCertificates">
            <summary>
            Returns a certificate collection from the 'Personal' 'CurrentUser' store.
            </summary>
            <returns>X509Certificate2Collection</returns>
        </member>
        <member name="M:CSS.PKI.X509.LocalStoreReader.GetMachineCertificates">
            <summary>
            Returns a certificate collection from the 'Personal' 'LocalMachine' store.
            </summary>
            <returns>X509Certificate2Collection</returns>
        </member>
        <member name="M:CSS.PKI.X509.LocalStoreReader.GetCertificate(System.Func{System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean})">
            <summary>
            Generic method to obtain a certificate matching the provided lambda expression predicate
             from either the user or machine certificate stores.
            </summary>
            <param name="predicate">Lambda expression to be used for filtering certificates.</param>
            <returns>X509Certificate2</returns>
        </member>
        <member name="M:CSS.PKI.X509.LocalStoreReader.CertificatePresent(System.Func{System.Security.Cryptography.X509Certificates.X509Certificate2,System.Boolean})">
            <summary>
            Generic method to determine if a certificate matching the provided lambda expression predicate
             from either the user or machine certificate stores is present
            </summary>
            <param name="predicate">Lambda expression to be used for filtering certificates.</param>
            <returns>boolean set to true if the certificate is present</returns>
        </member>
        <member name="M:CSS.PKI.X509.LocalStoreReader.CertificatePresentByThumbprint(System.String)">
            <summary>
            Generic method to determine if a certificate matching the provided thumbprint
             from either the user or machine certificate stores is present
            </summary>
            <param name="thumbprint">Certificate thumbprint to match.</param>
            <returns>boolean set to true if the certificate is present</returns>
        </member>
        <member name="M:CSS.PKI.X509.LocalStoreReader.GetCertificateByThumbprint(System.String)">
            <summary>
            Method to return a certificate matching the provided thumbprint
             from either the user or machine certificate stores.
            </summary>
            <param name="thumbprint">Certificate thumbprint to match.</param>
            <returns>X509Certificate2</returns>
        </member>
        <member name="M:CSS.PKI.X509.X509Utilities.GetDefaultFriendlyName(Org.BouncyCastle.X509.X509Certificate)">
            <summary>
            Gets the default friendly name of the certificate passed to it.
            </summary>
            <param name="bcCert">Bouncy Castle certificate to get the name of.</param>
            <returns>String containing certificate's default friendly name</returns>
        </member>
        <member name="M:CSS.PKI.X509.X509Utilities.GetEndEntityCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2Collection,System.String)">
            <summary>
            Returns the end entity certificate from an X509Certificate2Collection.
            </summary>
            <param name="collection">X509Certificate2Collection that will be searched for an end entity certificate.</param>
            <param name="password">The password used if there is a private key in the collection.</param>
            <returns>X509Certificate2 end entity certificate</returns>
        </member>
        <member name="M:CSS.PKI.X509.X509Utilities.BuildPFX(System.String,Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate)">
            <summary>
            Creates a PFX from a Bouncy Castle private key and Bouncy Castle certificate.
            </summary>
            <param name="password">password for the PFX.</param>
            <param name="privateKey">Bouncy Castle private key that will be associated with the PFX.</param>
            <param name="bcCert">Bouncy Castle certificate that will be included in the PFX.</param>
            <returns>PFX byte array</returns>
        </member>
        <member name="M:CSS.PKI.X509.X509Utilities.Pkcs7.GetCertsFromPkcs7(System.Byte[])">
            <summary>
            Returns a collection of X509 Certificates from a given pkcs7 string.
            </summary>
            <param name="pkcs7">Base64-encoded PKCS7 string containing certificates.</param>
            <returns>List of X509 Certificates, from most- to least-recently issued</returns>
        </member>
        <member name="M:CSS.PKI.X509.X509Utilities.Pkcs7.NewestCertFromPkcs7(System.Byte[])">
            <summary>
            Newest X509 Certificate from a given pkcs7 string.
            </summary>
            <param name="pkcs7">Base64-encoded PKCS7 string containing certificates.</param>
            <returns>Collection of X509 Certificates</returns>
        </member>
        <member name="P:CSS.PKI.X509.RequestDecoder.OriginalRequester">
            <summary>
            Determine if the request is Enroll-On-Behalf-Of, and if so, determine the "true" requester
            </summary>
        </member>
        <member name="P:CSS.PKI.X509.RequestDecoder.PublicKeyBytes">
            <summary>
            Returns the public key of the associated request as a byte array.
            </summary>
        </member>
        <member name="P:CSS.PKI.X509.RequestDecoder.KeyType">
            <summary>
            Returns the friendly name of the Algorithm used for the Public Key.
            </summary>
        </member>
        <member name="P:CSS.PKI.X509.RequestDecoder.KeyLength">
            <summary>
            Returns the length of the Public Key
            </summary>
        </member>
        <member name="F:CSS.PKI.PKIConstants.Microsoft.PolicyModule.RequestStatus.VR_PENDING">
            <summary>Add the request to the queue to accept or deny the request at a later time.</summary>
        </member>
        <member name="F:CSS.PKI.PKIConstants.Microsoft.PolicyModule.RequestStatus.VR_INSTANT_OK">
            <summary>request was accepted.</summary>
        </member>
        <member name="F:CSS.PKI.PKIConstants.Microsoft.PolicyModule.RequestStatus.VR_INSTANT_BAD">
            <summary>request was rejected.</summary>
        </member>
        <member name="T:CSS.PKI.PKIConstants.Microsoft.CAPIMagic">
            <summary>
            MS-CAPI magic numbers needed to make the PrivateKeyConverter work. Should not be needed by clients of this library
            </summary>
        </member>
    </members>
</doc>
